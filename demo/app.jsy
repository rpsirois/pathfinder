const GoalComponents = require @ './goal.js'
const ActionComponents = require @ './action.js'

const goal = new Planner.Goal @
    'KillEnemy'
    , @{} kTargetIsDead: true

const actions = @[]
    new Planner.Action @
        'Attack'
        , @{} kWeaponIsLoaded: true
        , @{} kTargetIsDead: true

    , new Planner.Action @
        'LoadWeapon'
        , @{} kWeaponIsArmed: true
        , @{} kWeaponIsLoaded: true

    , new Planner.Action @
        'DrawWeapon'
        , {}
        , @{} kWeaponIsArmed: true


class PlanCrumbView extends Inferno.Component ::
    constructor( props ) :: super @ props

    render() :: return @ <li class="plancrumb">{ this.props.crumb }</li>

class PlanView extends Inferno.Component ::
    constructor( props ) :: super @ props

    render() ::
        if this.props.plan && this.props.plan.path && this.props.plan.path.length ::
            let crumbs = this.props.plan.path.map @ crumb => <PlanCrumbView crumb={ crumb.key } />

            return @
                <div>
                    <p>Zee plan to <strong>{ this.props.plan.goal.key }</strong>:</p>
                    <ol>{ crumbs }</ol>
                </div>
        else ::
            return @ <p>No result.</p>

class App extends Inferno.Component ::
    constructor( props ) ::
        super @ props

        let agent = new Planner.Agent()

        agent.goals.push @ goal.clone()
        actions.forEach @ action => agent.addAction @ action.clone()

        this.state = ::
            agent: agent
            , plan: agent.getPlan()

    updatePlan = () => :: this.setState @ { plan: this.state.agent.getPlan() }

    addGoal = () => ::
        this.state.agent.goals.push @ new Planner.Goal()
        this.setState()

    removeGoal( aGoal ) ::
        this.state.agent.goals.remove @ aGoal
        this.setState @ { plan: this.state.agent.getPlan() }

    addAction = () => ::
        this.state.agent.actions.push @ new Planner.Action()
        this.setState()

    removeAction( anAction ) ::
        this.state.agent.removeAction @ anAction
        this.setState @ { plan: this.state.agent.getPlan() }

    render() ::
        const actions = this.state.agent.actions.map @ action =>
            <ActionComponents.ActionView key={ action.key } action={ action } removeAction={ () => this.removeAction( action ) } updatePlan={ this.updatePlan } />

        const goals = this.state.agent.goals.contents.map @ goal =>
            <GoalComponents.GoalView key={ goal.key } goal={ goal } removeGoal={ () => this.removeGoal( goal ) } updatePlan={ this.updatePlan } />

        return @
            <div>
                <p>Zee goalz:<button onClick={ this.addGoal }>Add Goal</button></p>
                { goals }
                <p>Zee akshunz:<button onClick={ this.addAction }>Add Action</button></p>
                { actions }
                <PlanView plan={ this.state.plan } />
            </div>

let container = document.getElementById @ 'container'

Inferno.render @ <App />, container
