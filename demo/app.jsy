const goal = new Planner.Goal @
    'KillEnemy'
    , @{} kTargetIsDead: true

const actions = @[]
    new Planner.Action @
        'Attack'
        , @{} kWeaponIsLoaded: true
        , @{} kTargetIsDead: true

    , new Planner.Action @
        'LoadWeapon'
        , @{} kWeaponIsArmed: true
        , @{} kWeaponIsLoaded: true

    , new Planner.Action @
        'DrawWeapon'
        , {}
        , @{} kWeaponIsArmed: true








class GoalView extends Inferno.Component ::
    constructor( props ) :: super @ props

    dosomething = ( evt ) => :: console.log @ 'clicked as prop', @{} this: this, evt

    renderBool( bool ) :: return bool ? 'true' : 'false'

    render() ::
        let conditions = Object.keys( this.props.goal.conditions ).map @ key => <li><strong>{ key }</strong>: { this.renderBool( this.props.goal.conditions[key] ) }</li>

        return @
            <div class="card">
                <button onClick={ this.dosomething }>X</button>
                <div class="clearing"></div>
                <p>Key: <strong>{ this.props.goal.key }</strong></p>
                <p>Priority: <strong>{ this.props.goal.priority }</strong></p>
                <p>
                    Conditions:
                    <ul>{ conditions }</ul>
                </p>
            </div>

class ActionView extends Inferno.Component ::
    constructor( props ) :: super @ props

    renderBool( bool ) :: return bool ? 'true' : 'false'

    render() ::
        let conditions = Object.keys( this.props.action.conditions ).map @ key => <li><strong>{ key }</strong>: { this.renderBool( this.props.action.conditions[key] ) }</li>
        let effects = Object.keys( this.props.action.effects ).map @ key => <li><strong>{ key }</strong>: { this.renderBool( this.props.action.effects[key] ) }</li>

        return @
            <div class="card">
                <button onClick={ evt => this.props.removeAction() }>X</button>
                <div class="clearing"></div>
                <p>Key: <strong>{ this.props.action.key }</strong></p>
                <p>
                    Conditions:
                    <ul>{ conditions }</ul>
                    Effects:
                    <ul>{ effects }</ul>
                </p>
            </div>

class PlanCrumbView extends Inferno.Component ::
    constructor( props ) :: super @ props

    render() :: return @ <li class="plancrumb">{ this.props.crumb }</li>

class PlanView extends Inferno.Component ::
    constructor( props ) :: super @ props

    render() ::
        if this.props.crumbs.length ::
            let crumbs = this.props.crumbs.map @ crumb => <PlanCrumbView crumb={ crumb.key } />
            return @ <ol>{ crumbs }</ol>
        else ::
            return @ <p>No result.</p>

class App extends Inferno.Component ::
    constructor( props ) ::
        super @ props

        let agent = new Planner.Agent()

        agent.goals.push @ goal.clone()
        actions.forEach @ action => agent.addAction @ action.clone()

        this.state = ::
            agent: agent
            , plan: agent.getPlan()

    removeAction( anAction ) ::
        this.state.agent.removeAction @ anAction
        this.setState @ { plan: this.state.agent.getPlan() }

    render() ::
        const actions = this.state.agent.actions.map @ action =>
            <ActionView key={ action.key } action={ action } removeAction={ () => this.removeAction( action ) } />

        return @
            <div>
                <p>Zee goalz:</p>
                <GoalView goal={ this.state.agent.getGoal() } />
                <p>Zee akshunz:</p>
                { actions }
                <p>Zee plan:</p>
                <PlanView crumbs={ this.state.plan } />
            </div>

let container = document.getElementById @ 'container'

Inferno.render @ <App />, container
