import { Heap } from './heap.jsy'

export class AStar ::
    constructor( heurFn, goalFn, succFn, costFn ) ::
        this.heurFn = heurFn
        this.goalFn = goalFn
        this.succFn = succFn
        this.costFn = costFn

    _nodeify( data, prev=null ) ::
        data._astar_data = @{}
            g: this.costFn @ data
            h: this.heurFn @ data, this.start
            prev

        return data

    _step() ::
        let current = this.open.pop()
        this.closed.push @ current

        if this.goalFn @ current :: return this.traceback @ current

        this.succFn( current ).forEach @\ successor ::
            if this.closed.indexOf( successor ) < 0 ::
                if this.open.contains @ successor ::
                    let tempCost = current._astar_data.g + successor._astar_data.g

                    if tempCost < successor._astar_data.g ::
                        successor._astar_data.g = tempCost
                        successor._astar_data.prev = current
                else ::
                    this.open.push @ this._nodeify @ successor, current

        if this.open.size() == 0 :: return []

        return this._step()

    find( start ) ::
        this.start = start
        this.open = new Heap @\ node :: return node._astar_data.g + node._astar_data.h
        this.closed = []

        this.open.push @ this._nodeify @ this.start

        return this._step()
        
    traceback( goal ) ::
        let path = @# goal
        let trace = @\ node ::
            if node._astar_data.prev ::
                path.push @ node._astar_data.prev
                trace @ node._astar_data.prev

        trace @ goal
        path.reverse()

        return path.map @\ node ::
            delete node._astar_data
            return node
