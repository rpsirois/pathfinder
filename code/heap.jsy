class Heap ::
  constructor( scoreFn, compareFn ) ::
    this.contents = []
    this.scoreFn = scoreFn !== undefined ? scoreFn : ( x ) => x
    this.compareFn = compareFn !== undefined ? compareFn : ( a, b ) => a < b

  toString() :: return this.contents

  size() :: return this.contents.length

  contains( item ) :: return this.contents.indexOf( item ) >= 0

  peek() :: return this.contents[0]

  remove( node ) ::
    const next = ( idx ) => ::
        if this.size() == 0 :: return null

        if this.contents[idx] == node ::
            let endNode = this.contents.pop()
            if node === endNode ::
                return node
            else ::
                this.contents[idx] = endNode
                this.bubbleUp @ idx
                this.sinkDown @ idx
                return node
        else
            if this.size() - 1 == idx ::
                return null
            else ::
                return next @ idx + 1
    return next @ 0

  push( nodes ) ::
    if !Array.isArray(nodes) :: nodes = [ nodes ]
    nodes.forEach @ ( node ) => ::
      this.contents.push @ node
      this.bubbleUp @ this.size() - 1
    return nodes

  pop() ::
    let result = this.contents[0]
    let end = this.contents.pop()

    if this.size() > 0 ::
      this.contents[0] = end
      this.sinkDown @ 0

    return result

  swap( a, b ) ::
    const t = this.contents[a]
    this.contents[a] = this.contents[b]
    this.contents[b] = t
    return a

  getIndexScore( index ) :: return this.scoreFn @ this.contents[index]

  getParentIndex( index ) :: return Math.floor @ (index - 1) / 2

  bubbleUp( index ) ::
    if index > 0 ::
        const parentIndex = this.getParentIndex @ index
        if this.compareFn @ this.getIndexScore( index ), this.getIndexScore( parentIndex ) ::
          this.bubbleUp @ this.swap @ parentIndex, index

  sinkDown( parentIndex ) ::
    if parentIndex < this.size() ::
        const parentScore = this.getIndexScore @ parentIndex
        const leftIndex = parentIndex * 2 + 1
        const rightIndex = parentIndex * 2 + 2
        var swapIdx

        const leftIndexScore = this.getIndexScore @ leftIndex
        if leftIndex < this.size() ::
          if this.compareFn @ leftIndexScore, parentScore ::
            swapIdx = leftIndex
        
        if rightIndex < this.size() ::
          const rightIndexScore = this.getIndexScore @ rightIndex
          if this.compareFn @ rightIndexScore, ( swapIdx !== undefined ? leftIndexScore : parentScore ) ::
            swapIdx = rightIndex

        if swapIdx !== undefined ::
          this.sinkDown @ this.swap @ swapIdx, parentIndex


module.exports = Heap
